import { Card } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Progress } from './ui/progress';
import { Download, FileText, Database } from 'lucide-react';
import { toast } from '../../../hooks/use-toast';

const TRAIT_NAMES = {
  motivation: 'Motivation',
  dedication: 'Dedication',
  adaptability: 'Adaptability', 
  ethics: 'Ethics',
  risk: 'Risk Taking',
  strategic: 'Strategic Thinking',
  cognitive: 'Cognitive Agility',
  self: 'Self Interest'
};

export default function Report({ candidateState, onRestart }) {
  // Calculate normalized scores
  const normalizedScores = {};
  Object.entries(candidateState.traits).forEach(([trait, value]) => {
    const clampedValue = Math.max(-30, Math.min(30, value));
    normalizedScores[trait] = Math.round(((clampedValue + 30) / 60) * 100);
  });

  // Calculate goal alignment
  const goalTraits = candidateState.mappedGoal.influence || [];
  const alignmentSum = goalTraits.reduce((sum, trait) => sum + (normalizedScores[trait] || 0), 0);
  const maxPossible = goalTraits.length * 100;
  const alignmentScore = Math.round((alignmentSum / maxPossible) * 100);
  
  const alignmentLevel = alignmentScore >= 75 ? 'strong' : alignmentScore >= 50 ? 'moderate' : 'low';
  const alignmentColors = {
    strong: 'text-success',
    moderate: 'text-[#f59f0a]', 
    low: 'text-destructive'
  };

  // Generate persona summary
  const topTraits = Object.entries(normalizedScores)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 3)
    .map(([trait, _]) => TRAIT_NAMES[trait]);
  
  const personaSummary = `You demonstrate strong ${topTraits[0].toLowerCase()} with notable ${topTraits[1].toLowerCase()} and ${topTraits[2].toLowerCase()}. Your decision patterns suggest a ${alignmentLevel} alignment with your chosen goal of ${candidateState.selectedGoal.title.toLowerCase()}.`;

  // Behavioral flags
  const behavioralFlags = [];
  if (normalizedScores.ethics < 30) behavioralFlags.push('Ethical Risk');
  if (normalizedScores.risk > 80) behavioralFlags.push('High Risk Tolerance');
  if (normalizedScores.adaptability > 75) behavioralFlags.push('Highly Adaptable');
  if (normalizedScores.dedication > 80) behavioralFlags.push('Highly Committed');

  const exportJSON = () => {
    const report = {
      sessionId: candidateState.sessionId,
      candidatePersona: personaSummary,
      traitScores: candidateState.traits,
      normalizedScores,
      goalAlignment: {
        score: alignmentScore,
        level: alignmentLevel,
        explanation: `Based on decisions made across ${goalTraits.join(', ')} dimensions`
      },
      decisions: candidateState.decisions,
      behavioralFlags,
      timestamp: new Date()
    };

    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `lifepath-report-${candidateState.sessionId}.json`;
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded",
      description: "JSON report saved successfully"
    });
  };

  const exportPDF = () => {
    // Enhanced PDF-style report content
    const reportContent = `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
                 LIFEPATH ASSESSMENT REPORT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

SESSION DETAILS
├─ Session ID: ${candidateState.sessionId}
├─ Assessment Date: ${new Date().toLocaleDateString()}
├─ Selected Goal: ${candidateState.selectedGoal.title}
└─ Mapped Assessment Goal: ${candidateState.mappedGoal.title}

EXECUTIVE SUMMARY
${personaSummary}

PSYCHOLOGICAL PROFILE
${Object.entries(normalizedScores).map(([trait, score]) => {
  const barLength = Math.round(score / 5);
  const bar = '█'.repeat(barLength) + '░'.repeat(20 - barLength);
  return `${TRAIT_NAMES[trait].padEnd(20)} │${bar}│ ${score}/100`;
}).join('\n')}

GOAL ALIGNMENT ANALYSIS
├─ Alignment Score: ${alignmentScore}/100
├─ Alignment Level: ${alignmentLevel.toUpperCase()}
└─ Key Traits: ${goalTraits.map(t => TRAIT_NAMES[t]).join(', ')}

DECISION HISTORY
${candidateState.decisions.map((d, i) => 
  `${(i + 1).toString().padStart(2, '0')}. Age ${d.age} │ ${d.category.toUpperCase()}\n    ${d.scenario.substring(0, 120)}${d.scenario.length > 120 ? '...' : ''}\n    ► ${d.selectedOption !== undefined ? d.options[d.selectedOption]?.label : 'No selection'}\n`
).join('\n')}

BEHAVIORAL INDICATORS
${behavioralFlags.length > 0 ? behavioralFlags.map(flag => `• ${flag}`).join('\n') : '• No significant behavioral flags identified'}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Report generated by LifePath Assessment Platform
For questions about this assessment, contact your HR representative.
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `lifepath-assessment-${candidateState.sessionId}.txt`;
    a.click();
    URL.revokeObjectURL(url);

    toast({
      title: "Report Downloaded", 
      description: "Detailed assessment report saved successfully"
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-muted/30 p-6">
      <div className="max-w-6xl mx-auto space-y-8">
        
        {/* Header */}
        <div className="text-center">
          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-[#4a4fde] to-[#3abff8] bg-clip-text text-transparent">
            Your LifePath Assessment Report
          </h1>
          <p className="text-lg text-[#6b7280]">
            A comprehensive analysis of your decision-making patterns over 10 years
          </p>
        </div>

        {/* Summary Card */}
        <Card className="p-8 border border-[#e5e7eb]">
          <h2 className="text-2xl font-bold mb-4">Executive Summary</h2>
          <p className="text-lg leading-relaxed mb-6">{personaSummary}</p>
          
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-semibold mb-2">Selected Goal</h3>
              <div className="flex items-center gap-3">
                <img src={candidateState.selectedGoal.image} alt="" className="w-8 h-8" />
                <span>{candidateState.selectedGoal.title}</span>
              </div>
            </div>
            <div>
              <h3 className="font-semibold mb-2">Goal Alignment</h3>
              <div className="flex items-center gap-3">
                <Progress value={alignmentScore} className="flex-1" />
                <Badge className={alignmentColors[alignmentLevel]}>
                  {alignmentScore}% ({alignmentLevel})
                </Badge>
              </div>
            </div>
          </div>
        </Card>

        {/* Trait Analysis */}
        <Card className="p-8 border border-[#e5e7eb]">
          <h2 className="text-2xl font-bold mb-6">Psychological Profile</h2>
          <div className="grid md:grid-cols-2 gap-8">
            {Object.entries(normalizedScores).map(([trait, score]) => (
              <div key={trait} className="space-y-2">
                <div className="flex justify-between items-center">
                  <span className="font-medium">{TRAIT_NAMES[trait]}</span>
                  <span className="text-sm font-mono">{score}/100</span>
                </div>
                <Progress value={score} className="h-3" />
              </div>
            ))}
          </div>
          
          {behavioralFlags.length > 0 && (
            <div className="mt-6 p-4 bg-muted/50 rounded-lg">
              <h3 className="font-semibold mb-2">Behavioral Indicators</h3>
              <div className="flex flex-wrap gap-2">
                {behavioralFlags.map(flag => (
                  <Badge key={flag} variant="outline">{flag}</Badge>
                ))}
              </div>
            </div>
          )}
        </Card>

        {/* Decision Timeline */}
        <Card className="p-8 border border-[#e5e7eb]">
          <h2 className="text-2xl font-bold mb-6">Decision Timeline</h2>
          <div className="space-y-4">
            {candidateState.decisions.map((decision, index) => (
              <div key={index} className="border-l-2 border-[#4a4fde]/20 pl-4 py-2">
                <div className="flex items-center gap-2 mb-1">
                  <Badge variant="outline" className="border border-[#e5e7eb]">Age {decision.age}</Badge>
                  <span className="text-sm text-[#6b7280]">{decision.category}</span>
                </div>
                <p className="text-sm mb-2">{decision.scenario}</p>
                {decision.selectedOption !== undefined && (
                  <p className="text-sm font-medium text-[#4a4fde]">
                    Chose: {decision.options[decision.selectedOption]?.label}
                  </p>
                )}
              </div>
            ))}
          </div>
        </Card>

        {/* Export Options */}
        <Card className="p-8 border border-[#e5e7eb]">
          <h2 className="text-2xl font-bold mb-6">Export & Actions</h2>
          <div className="flex flex-wrap gap-4">
            <Button onClick={exportPDF} className="flex items-center gap-2 text-white">
              <FileText className="w-4 h-4" />
              Download Assessment Report
            </Button>
            <Button onClick={exportJSON} variant="outline" className="flex items-center gap-2 border border-[#e5e7eb]">
              <Database className="w-4 h-4" />
              Export JSON Data
            </Button>
            <Button onClick={onRestart} variant="secondary" className="flex items-center gap-2 text-white">
              <Download className="w-4 h-4" />
              Start New Assessment
            </Button>
          </div>
        </Card>
      </div>
    </div>
  );
}
